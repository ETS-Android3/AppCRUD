package com.gmail.jesusdc99.crudproject.views;

import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.text.TextUtils;
import android.util.Base64;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;
import com.gmail.jesusdc99.crudproject.R;
import com.gmail.jesusdc99.crudproject.models.Game;

import java.util.ArrayList;

public class GameAdapter extends RecyclerView.Adapter<GameAdapter.GameViewHolder> implements View.OnClickListener {

    private ArrayList<Game> items;
    private View.OnClickListener listener;

    // Clase interna:
    // Se implementa el ViewHolder que se encargar√°
    // de almacenar la vista del elemento y sus datos
    public static class GameViewHolder extends RecyclerView.ViewHolder {

        private TextView idTextView;
        private TextView titleTextView;
        private TextView platformTextView;
        private ImageView imageView;

        public GameViewHolder(View itemView) {
            super(itemView);
            titleTextView = itemView.findViewById(R.id.data_tituloTextView);
            platformTextView = itemView.findViewById(R.id.data_plataformaTextView);
            imageView = itemView.findViewById(R.id.data_imageView);
        }

        public void GameBind(Game item) {
            titleTextView.setText(item.getTitle());
            platformTextView.setText(item.getPlatform());

            // Si no tiene portada
            if(TextUtils.isEmpty(item.getImage())) {
                String defaultCover = "";
                item.setImage(defaultCover);
            }
            byte[] decodedString = Base64.decode(item.getImage(), Base64.DEFAULT);
            Bitmap decodedByte = BitmapFactory.decodeByteArray(decodedString, 0, decodedString.length);
            imageView.setImageBitmap(decodedByte);
        }
    }

    // Construye el objeto adaptador recibiendo la lista de datos
    public GameAdapter(@NonNull ArrayList<Game> items) {
        this.items = items;
    }

    // Se encarga de crear los nuevos objetos ViewHolder necesarios
    // para los elementos de la colecci√≥n.
    // Infla la vista del layout, crea y devuelve el objeto ViewHolder
    @Override
    public GameViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View row = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.row_data, parent, false);
        row.setOnClickListener(this);

        GameViewHolder avh = new GameViewHolder(row);
        return avh;
    }

    // Se encarga de actualizar los datos de un ViewHolder ya existente.
    @Override
    public void onBindViewHolder(GameViewHolder viewHolder, int position) {
        Game item = items.get(position);
        viewHolder.GameBind(item);
    }

    // Indica el n√∫mero de elementos de la colecci√≥n de datos.
    @Override
    public int getItemCount() {
        return items.size();
    }

    // Asigna un listener al elemento
    public void setOnClickListener(View.OnClickListener listener) {
        this.listener = listener;
    }

    @Override
    public void onClick(View view) {
        if(listener != null)
            listener.onClick(view);
    }
}
